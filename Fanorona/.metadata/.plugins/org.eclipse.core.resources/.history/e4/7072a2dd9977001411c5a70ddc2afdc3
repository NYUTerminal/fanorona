package Logic;

public class Engine {

	private int MAX_ROW;
	private int MAX_COL;
	private int row;
	private int col;
	private Color playerColor = Color.BLACK;
	private final int smallBoard = 2;
	private final int largeBoard = 4;
	private int[][] gameState;

	public Engine() {
		this.MAX_ROW = 0;
		this.MAX_COL = 0;
		this.row = 0;
		this.col = 0;

	}

	public void initializeBoard(int sizeOfBoard, String playerColor) {
		if (sizeOfBoard == 1) {
			this.MAX_COL = smallBoard;
			this.MAX_ROW = smallBoard;
		} else {
			this.MAX_COL = largeBoard;
			this.MAX_ROW = largeBoard;
		}
		if (playerColor.equals(Color.WHITE)) {
			this.playerColor = Color.WHITE;
		}
		for (int i = 0; i < MAX_ROW; i++) {
			for (int j = 0; j < MAX_COL; j++) {
				gameState[i][j] = 0;
			}
		}
	}
	
	public  boolean checkGameOver(){
		int blackPieces=0;
		int whitePieces=0;
		for (int i = 0; i < this.MAX_ROW; i++) {
			for (int j = 0; j < this.MAX_COL; j++) {
				if(gameState[i][j]==-1){
					blackPieces++;
				}else if(gameState[i][j]){
					whitePieces++;
				}
			}
		}
		
		
		if(whitePieces==0|blackPieces==0){
			return true;
		}
		
	}

	private void placePiecesOnBoard() {

	}

	public static void main(String[] args) {
		Engine e = new Engine();
		System.out.println(e.MAX_COL);

	}

	public int[] getAllPossiblePositions() {

		return null;

	}

	public void buildGameTree(GameTreeNode currentState) {

		// Now all possible ways needs to be

	}

}
