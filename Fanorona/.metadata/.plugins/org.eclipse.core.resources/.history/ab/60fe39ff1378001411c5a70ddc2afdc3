package Logic;

public class Engine {

	private int MAX_ROW;
	private int MAX_COL;
	private int row;
	private int col;
	private Color playerColor = Color.BLACK;
	private final int smallBoard = 2;
	private final int largeBoard = 4;
	private int[][] boardState;

	public Engine() {
		this.MAX_ROW = 0;
		this.MAX_COL = 0;
		this.row = 0;
		this.col = 0;

	}

	public void initializeBoard(int sizeOfBoard, String playerColor) {
		if (sizeOfBoard == 1) {
			this.MAX_COL = smallBoard;
			this.MAX_ROW = smallBoard;
		} else {
			this.MAX_COL = largeBoard;
			this.MAX_ROW = largeBoard;
		}
		if (playerColor.equals(Color.WHITE)) {
			this.playerColor = Color.WHITE;
		}
		boardState = new int[MAX_ROW+1][MAX_COL];
		boolean flip = false;
		for (int i = 0; i <= MAX_ROW; i++) {
			for (int j = 0; j <= MAX_COL; j++) {
				if (i % 2 == 0 && i < (MAX_ROW / 2)) {
					boardState[i][j] = +1;
				} else if (i > (MAX_ROW / 2)) {
					boardState[i][j] = -1;
				} else if (i == MAX_ROW / 2 && i != j && flip) {
					boardState[i][j] = -1;
					flip=true;
				} else if (i != j) {
					boardState[i][j] = +1;
				} else {
					boardState[i][j] = 0;
				}
			}
		}
	}

	public int evaluateFunction(int[][] gameState) {
		int value = 0;

		for (int x = 0; x < MAX_ROW; x++) {
			for (int y = 0; y < MAX_COL; y++) {
				if (gameState[x][y] == 1)
					value++;
				if (gameState[x][y] == -1)
					value--;
			}
		}
		return value;
	}

	public boolean checkGameOver(int[][] boardState) {
		int blackPieces = 0;
		int whitePieces = 0;
		for (int i = 0; i < this.MAX_ROW; i++) {
			for (int j = 0; j < this.MAX_COL; j++) {
				if (boardState[i][j] == -1) {
					blackPieces++;
				} else if (boardState[i][j] == +1) {
					whitePieces++;
				}
			}
		}
		if (whitePieces == 0 | blackPieces == 0) {
			return true;
		} else
			return false;

	}

	private void placePiecesOnBoard() {

	}

	public static void main(String[] args) {
		Engine e = new Engine();
		System.out.println(e.MAX_COL);

	}

	public int[] getAllPossiblePositions() {

		return null;

	}

	public void buildGameTree(GameTreeNode currentState) {

		// Now all possible ways needs to be

	}

	public void printCurrestStateOfBoard() {
		for (int i = 0; i < MAX_ROW; i++) {
			System.out.println("\n");
			for (int j = 0; j < MAX_COL; j++) {
				System.out.println(boardState[i][j]);
			}
		}
	}

}
